{
  "documents": [
    {
      "content": "# AWS Setup Guide\n\n## Overview\nThis guide will help you set up and configure AWS resources for your application infrastructure.\n\n## Prerequisites\n- AWS Account with appropriate permissions\n- AWS CLI installed\n- IAM credentials configured\n\n## EC2 Instance Setup\n\n### Step 1: Launch an Instance\n1. Navigate to EC2 Dashboard\n2. Click \"Launch Instance\"\n3. Choose Amazon Linux 2 AMI\n4. Select instance type (t2.micro for testing, t3.medium for production)\n5. Configure instance details:\n   - Network: Select your VPC\n   - Subnet: Choose availability zone\n   - Auto-assign Public IP: Enable\n\n### Step 2: Configure Security Groups\nCreate a security group with the following rules:\n- SSH (22): Your IP only\n- HTTP (80): 0.0.0.0/0\n- HTTPS (443): 0.0.0.0/0\n- Custom TCP (8080): 0.0.0.0/0 (for application)\n\n### Step 3: Add Tags\nAlways tag your resources:\n- Name: `my-app-server`\n- Environment: `production` or `development`\n- Owner: Your team name\n- Project: Project identifier\n\n## S3 Bucket Setup\n\n### Creating a Bucket\n```bash\naws s3 mb s3://my-app-bucket --region us-east-1\n```\n\n### Bucket Policy\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::my-app-bucket/*\"\n    }\n  ]\n}\n```\n\n## RDS Database Setup\n\n### Step 1: Create Database\n1. Choose RDS service\n2. Select PostgreSQL or MySQL\n3. Choose production or dev/test template\n4. Set DB instance identifier\n5. Configure master username and password\n\n### Step 2: Security Configuration\n- VPC: Same as your EC2 instances\n- Security group: Allow port 5432 (PostgreSQL) or 3306 (MySQL) from EC2 security group\n- Public accessibility: No (for production)\n\n## Best Practices\n\n### Security\n- Never use root account for daily operations\n- Enable MFA for all users\n- Use IAM roles for EC2 instances\n- Rotate credentials regularly\n- Use AWS Secrets Manager for sensitive data\n\n### Cost Optimization\n- Use Reserved Instances for predictable workloads\n- Enable Auto Scaling\n- Set up CloudWatch billing alarms\n- Delete unused resources\n- Use S3 lifecycle policies\n\n### Monitoring\n- Enable CloudWatch monitoring\n- Set up SNS notifications\n- Configure CloudTrail for audit logs\n- Use AWS Config for compliance\n\n## Common Issues\n\n### SSH Connection Refused\n- Check security group allows your IP\n- Verify key pair is correct\n- Ensure instance is running\n\n### S3 Access Denied\n- Check bucket policy\n- Verify IAM permissions\n- Confirm bucket exists in correct region\n\n### RDS Connection Timeout\n- Check security group rules\n- Verify VPC and subnet configuration\n- Ensure RDS instance is available\n\n## Additional Resources\n- [AWS Documentation](https://docs.aws.amazon.com/)\n- [AWS Well-Architected Framework](https://aws.amazon.com/architecture/well-architected/)\n- [AWS CLI Reference](https://docs.aws.amazon.com/cli/)\n",
      "source": "aws-setup.md",
      "file_name": "aws-setup.md",
      "file_type": ".md"
    },
    {
      "content": "# Deployment Guide\n\n## Application Deployment Process\n\n### Overview\nThis document outlines the deployment process for our application across different environments.\n\n## Environments\n\n### Development\n- **Purpose**: Feature development and testing\n- **URL**: https://dev.myapp.com\n- **Branch**: `develop`\n- **Auto-deploy**: On every push\n\n### Staging\n- **Purpose**: Pre-production testing\n- **URL**: https://staging.myapp.com\n- **Branch**: `staging`\n- **Deploy**: Manual approval required\n\n### Production\n- **Purpose**: Live user traffic\n- **URL**: https://myapp.com\n- **Branch**: `main`\n- **Deploy**: Manual approval + automated tests\n\n## Deployment Steps\n\n### 1. Pre-Deployment Checklist\n- [ ] All tests passing\n- [ ] Code reviewed and approved\n- [ ] Database migrations ready\n- [ ] Environment variables configured\n- [ ] Backup current production data\n- [ ] Notify team of deployment window\n\n### 2. Backend Deployment\n\n#### Using Docker\n```bash\n# Build the image\ndocker build -t myapp-backend:latest .\n\n# Tag for registry\ndocker tag myapp-backend:latest registry.example.com/myapp-backend:v1.2.3\n\n# Push to registry\ndocker push registry.example.com/myapp-backend:v1.2.3\n\n# Deploy to ECS/Kubernetes\nkubectl apply -f k8s/deployment.yaml\n```\n\n#### Using PM2 (Node.js)\n```bash\n# Install dependencies\nnpm install --production\n\n# Start with PM2\npm2 start ecosystem.config.js --env production\n\n# Save PM2 configuration\npm2 save\n```\n\n### 3. Frontend Deployment\n\n#### React Application\n```bash\n# Install dependencies\nnpm install\n\n# Build production bundle\nnpm run build\n\n# Deploy to S3 + CloudFront\naws s3 sync build/ s3://myapp-frontend --delete\naws cloudfront create-invalidation --distribution-id XXXXX --paths \"/*\"\n```\n\n### 4. Database Migration\n\n```bash\n# Backup database first\npg_dump myapp_prod > backup_$(date +%Y%m%d).sql\n\n# Run migrations\nnpm run migrate:up\n\n# Verify migration\nnpm run migrate:status\n```\n\n### 5. Post-Deployment Verification\n\n#### Health Checks\n```bash\n# Check API health\ncurl https://api.myapp.com/health\n\n# Check frontend\ncurl https://myapp.com\n\n# Check database connection\npsql -h db.example.com -U myapp -c \"SELECT 1\"\n```\n\n#### Smoke Tests\n- Login functionality\n- Core user workflows\n- API response times\n- Database queries\n\n## Rollback Procedure\n\n### If deployment fails:\n\n1. **Immediate Rollback**\n```bash\n# Kubernetes\nkubectl rollout undo deployment/myapp-backend\n\n# Docker\ndocker service update --rollback myapp-backend\n\n# PM2\npm2 reload ecosystem.config.js --env production\n```\n\n2. **Database Rollback**\n```bash\n# Rollback migration\nnpm run migrate:down\n\n# Restore from backup\npsql myapp_prod < backup_20240101.sql\n```\n\n3. **Notify Team**\n- Post in #deployments channel\n- Update status page\n- Document incident\n\n## CI/CD Pipeline\n\n### GitHub Actions Workflow\n```yaml\nname: Deploy to Production\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run tests\n        run: npm test\n      - name: Build\n        run: npm run build\n      - name: Deploy\n        run: ./deploy.sh production\n```\n\n## Monitoring\n\n### Key Metrics\n- **Response Time**: < 200ms (p95)\n- **Error Rate**: < 0.1%\n- **CPU Usage**: < 70%\n- **Memory Usage**: < 80%\n\n### Alerts\n- High error rate (> 1% for 5 minutes)\n- Slow response times (> 500ms for 5 minutes)\n- Service down (health check fails)\n\n## Security\n\n### SSL/TLS Configuration\n- Use Let's Encrypt for certificates\n- Enable HTTPS redirect\n- Configure HSTS headers\n- Update certificates before expiry\n\n### Secret Management\n- Store secrets in AWS Secrets Manager\n- Never commit secrets to git\n- Rotate secrets quarterly\n- Use different secrets per environment\n\n## Troubleshooting\n\n### Common Issues\n\n#### Deployment Stuck\n- Check Docker/Kubernetes logs\n- Verify resource limits\n- Check network connectivity\n\n#### Database Connection Errors\n- Verify security groups\n- Check connection string\n- Confirm database is running\n\n#### High Memory Usage\n- Check for memory leaks\n- Review application logs\n- Scale horizontally if needed\n\n## Emergency Contacts\n\n- **On-call Engineer**: Slack @oncall\n- **DevOps Team**: #devops channel\n- **Database Admin**: dba@example.com\n\n## Documentation Links\n- [Architecture Diagram](https://wiki.example.com/architecture)\n- [API Documentation](https://api.myapp.com/docs)\n- [Runbook](https://wiki.example.com/runbook)\n",
      "source": "deployment.md",
      "file_name": "deployment.md",
      "file_type": ".md"
    },
    {
      "content": "# Troubleshooting Guide\n\n## Common Issues and Solutions\n\n### Application Issues\n\n#### 1. Application Won't Start\n\n**Symptoms:**\n- Server fails to start\n- Port already in use error\n- Module not found errors\n\n**Solutions:**\n\n**Check if port is already in use:**\n```bash\n# Windows\nnetstat -ano | findstr :5000\n\n# Kill the process\ntaskkill /PID <process_id> /F\n\n# Linux/Mac\nlsof -i :5000\nkill -9 <pid>\n```\n\n**Missing dependencies:**\n```bash\n# Backend\npip install -r requirements.txt\n\n# Frontend\nnpm install\n```\n\n**Environment variables not set:**\n```bash\n# Check if .env exists\ncat .env\n\n# Copy from example if needed\ncp .env.example .env\n```\n\n#### 2. Database Connection Failed\n\n**Symptoms:**\n- \"Connection refused\" errors\n- Timeout errors\n- Authentication failed\n\n**Solutions:**\n\n**Verify database is running:**\n```bash\n# PostgreSQL\npg_isready -h localhost -p 5432\n\n# MySQL\nmysqladmin ping -h localhost\n\n# Check Docker container\ndocker ps | grep postgres\n```\n\n**Check connection string:**\n```bash\n# Format: postgresql://user:password@host:port/database\necho $DATABASE_URL\n```\n\n**Test connection manually:**\n```bash\n# PostgreSQL\npsql -h localhost -U myuser -d mydb\n\n# MySQL\nmysql -h localhost -u myuser -p mydb\n```\n\n#### 3. API Returns 500 Errors\n\n**Symptoms:**\n- Internal server error\n- No detailed error message\n- Stack traces in logs\n\n**Solutions:**\n\n**Check application logs:**\n```bash\n# Flask\ntail -f app.log\n\n# Docker\ndocker logs -f container_name\n\n# PM2\npm2 logs\n```\n\n**Common causes:**\n- Unhandled exceptions\n- Database query errors\n- Missing environment variables\n- Insufficient permissions\n\n**Enable debug mode:**\n```python\n# Flask\napp.run(debug=True)\n```\n\n### AI/LLM Issues\n\n#### 4. Gemini API Errors\n\n**Symptoms:**\n- \"API key not valid\" error\n- Rate limit exceeded\n- Quota exceeded\n\n**Solutions:**\n\n**Verify API key:**\n```bash\n# Check if key is set\necho $GOOGLE_API_KEY\n\n# Test the key\ncurl -H \"Content-Type: application/json\" \\\n  -d '{\"contents\":[{\"parts\":[{\"text\":\"Hello\"}]}]}' \\\n  \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$GOOGLE_API_KEY\"\n```\n\n**Rate limiting:**\n- Wait before retrying\n- Implement exponential backoff\n- Consider upgrading API tier\n\n**Quota exceeded:**\n- Check usage in [Google AI Studio](https://makersuite.google.com/)\n- Request quota increase\n- Implement caching to reduce calls\n\n#### 5. Vector Search Not Working\n\n**Symptoms:**\n- \"No relevant documents found\"\n- ChromaDB errors\n- Slow search performance\n\n**Solutions:**\n\n**Re-run ingestion:**\n```bash\ncd backend\npython ingest.py\n```\n\n**Check ChromaDB:**\n```python\n# In Python console\nfrom langchain.vectorstores import Chroma\nfrom langchain_google_genai import GoogleGenerativeAIEmbeddings\n\nembeddings = GoogleGenerativeAIEmbeddings(model=\"models/embedding-001\")\nvectorstore = Chroma(persist_directory=\"./chroma_db\", embedding_function=embeddings)\n\n# Check number of documents\nprint(vectorstore._collection.count())\n```\n\n**Performance issues:**\n- Increase chunk size\n- Add more relevant documents\n- Adjust similarity threshold\n\n### Cloud Integration Issues\n\n#### 6. AWS Boto3 Errors\n\n**Symptoms:**\n- \"No credentials found\"\n- \"Access Denied\" errors\n- Region errors\n\n**Solutions:**\n\n**Configure credentials:**\n```bash\n# Set environment variables\nexport AWS_ACCESS_KEY_ID=your_key\nexport AWS_SECRET_ACCESS_KEY=your_secret\nexport AWS_DEFAULT_REGION=us-east-1\n\n# Or use AWS CLI\naws configure\n```\n\n**Verify IAM permissions:**\n```bash\n# Test EC2 access\naws ec2 describe-instances\n\n# Test S3 access\naws s3 ls\n```\n\n**Common IAM policies needed:**\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:Describe*\",\n        \"s3:List*\",\n        \"s3:Get*\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n### Frontend Issues\n\n#### 7. CORS Errors\n\n**Symptoms:**\n- \"Access to fetch blocked by CORS policy\"\n- Network errors in browser console\n\n**Solutions:**\n\n**Backend (Flask):**\n```python\nfrom flask_cors import CORS\nCORS(app)\n```\n\n**Check backend is running:**\n```bash\n# Should return JSON\ncurl http://localhost:5000/api/health\n```\n\n**Verify frontend API URL:**\n```typescript\n// Should point to backend\nconst API_URL = 'http://localhost:5000';\n```\n\n#### 8. React Build Fails\n\n**Symptoms:**\n- TypeScript errors\n- Module not found\n- Out of memory errors\n\n**Solutions:**\n\n**Clear cache:**\n```bash\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n**Increase memory:**\n```bash\n# Linux/Mac\nexport NODE_OPTIONS=\"--max-old-space-size=4096\"\n\n# Windows\nset NODE_OPTIONS=--max-old-space-size=4096\n\nnpm run build\n```\n\n**Check TypeScript errors:**\n```bash\nnpm run type-check\n```\n\n### Performance Issues\n\n#### 9. Slow Response Times\n\n**Symptoms:**\n- API takes > 5 seconds\n- Frontend feels sluggish\n- High CPU usage\n\n**Solutions:**\n\n**Profile the application:**\n```python\n# Add timing\nimport time\nstart = time.time()\n# ... your code ...\nprint(f\"Took {time.time() - start:.2f}s\")\n```\n\n**Optimize database queries:**\n- Add indexes\n- Use connection pooling\n- Cache frequent queries\n\n**Implement caching:**\n```python\nfrom functools import lru_cache\n\n@lru_cache(maxsize=100)\ndef expensive_operation(param):\n    # ...\n```\n\n#### 10. High Memory Usage\n\n**Symptoms:**\n- Application crashes\n- Out of memory errors\n- Slow performance\n\n**Solutions:**\n\n**Monitor memory:**\n```bash\n# Check Python process\nps aux | grep python\n\n# Docker container\ndocker stats container_name\n```\n\n**Common causes:**\n- Large file uploads\n- Memory leaks\n- Too many cached embeddings\n\n**Solutions:**\n- Implement pagination\n- Clear caches periodically\n- Use streaming for large responses\n\n## Getting Help\n\n### Debug Checklist\n1. ✅ Check logs for errors\n2. ✅ Verify environment variables\n3. ✅ Test each component individually\n4. ✅ Check network connectivity\n5. ✅ Review recent changes\n\n### Resources\n- [Flask Documentation](https://flask.palletsprojects.com/)\n- [LangChain Docs](https://python.langchain.com/)\n- [Google Gemini API](https://ai.google.dev/)\n- [AWS Boto3 Docs](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html)\n\n### Contact\n- **Slack**: #infra-chat-support\n- **Email**: support@example.com\n- **GitHub Issues**: [Create an issue](https://github.com/yourorg/infra-chat/issues)\n",
      "source": "troubleshooting.md",
      "file_name": "troubleshooting.md",
      "file_type": ".md"
    }
  ],
  "metadata": {
    "total_docs": 3,
    "indexed_at": "D:\\Infra-Chat\\backend",
    "mode": "simple_keyword"
  }
}